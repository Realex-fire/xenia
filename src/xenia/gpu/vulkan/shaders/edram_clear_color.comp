// NOTE: This file is compiled and embedded into the exe.
//       Use `xb genspirv` and check in any changes under bin/.

#version 450 core
#extension all : warn
#extension GL_ARB_compute_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shader_image_load_store : require
#extension GL_ARB_shading_language_420pack : require

layout(local_size_x = 40, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform push_consts_type {
  uint offset_tiles;
  uint pitch_tiles;
  uint color_high;
  uint color_low;
} push_constants;

layout(set = 0, binding = 0, r32ui) uniform uimage2DArray edram;
layout(set = 0, binding = 1) buffer depth_dirty {uint depth_dirty_bits[64];};

void main() {
  uint tile_index = push_constants.offset_tiles + gl_WorkGroupID.y *
                    push_constants.pitch_tiles + gl_WorkGroupID.x;
  uvec3 coord_high =
      uvec3(tile_index & 15, tile_index >> 4, 0) * uvec3(80, 16, 0);
  coord_high.x += gl_LocalInvocationID.x << 1;
  coord_high.y += gl_LocalInvocationID.y;
  uvec3 coord_low = coord_high;
  ++coord_low.x;
  uint pixel_old_high = imageLoad(edram, ivec3(coord_high)).r;
  uint pixel_old_low = imageLoad(edram, ivec3(coord_low)).r;
  if (pixel_old_high != push_constants.color_high ||
      pixel_old_low != push_constants.color_low) {
    imageStore(edram, ivec3(coord_high), uvec4(push_constants.color_high));
    imageStore(edram, ivec3(coord_low), uvec4(push_constants.color_low));
    atomicOr(depth_dirty_bits[tile_index >> 5], 1u << (tile_index & 31));
  }
}
