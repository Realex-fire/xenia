// NOTE: This file is compiled and embedded into the exe.
//       Use `xb genspirv` and check in any changes under bin/.

#version 450 core
#extension all : warn
#extension GL_ARB_compute_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shader_image_load_store : require
#extension GL_ARB_shading_language_420pack : require

// 40x16 RT pixels to 40x16 EDRAM texels (80x16 threads per group is too much).
layout(local_size_x = 40, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform push_consts_type {
  uint edram_offset_tiles;
  uint edram_pitch_tiles;
  uvec2 rt_offset_px;
} push_constants;

layout(set = 0, binding = 0, r32ui) uniform uimage2DArray edram;
layout(set = 0, binding = 1) buffer depth_dirty {uint depth_dirty_bits[64];};
layout(set = 0, binding = 2, r32ui) uniform readonly uimage2D rt;

void main() {
  uvec4 pixel = imageLoad(rt, ivec2(gl_GlobalInvocationID.xy +
                                    push_constants.rt_offset_px));
  uint tile_index = push_constants.edram_offset_tiles + gl_WorkGroupID.y *
                    push_constants.edram_pitch_tiles + (gl_WorkGroupID.x >> 1);
  uint subgroup = gl_WorkGroupID.x & 1;
  uvec3 edram_coord = uvec3(tile_index & 15, tile_index >> 4, 0) *
                      uvec3(80, 16, 0) + gl_LocalInvocationID;
  edram_coord.x += subgroup * 40;
  uint pixel_old = imageLoad(edram, ivec3(edram_coord)).r;
  if (pixel.r != pixel_old) {
    imageStore(edram, ivec3(edram_coord), pixel);
    atomicOr(depth_dirty_bits[tile_index >> 5], 1u << (tile_index & 31));
  }
}
