// NOTE: This file is compiled and embedded into the exe.
//       Use `xb genspirv` and check in any changes under bin/.

#version 450 core
#extension all : warn
#extension GL_ARB_compute_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shader_image_load_store : require
#extension GL_ARB_shading_language_420pack : require

// 2 groups per tile (80x16 threads per group is too much).
layout(local_size_x = 80, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform push_consts_type {
  uint edram_offset_tiles;
  uint edram_pitch_tiles;
  uint buffer_pitch_px;
} push_constants;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimage2D edram;
layout(set = 0, binding = 1, r32ui) uniform readonly uimageBuffer buffer_depth;
layout(set = 0, binding = 2, r8ui) uniform readonly uimageBuffer buffer_stencil;

// Based on the 6e4 code from:
// https://github.com/Microsoft/DirectXTex/blob/master/DirectXTex/DirectXTexConvert.cpp
uint Float32To20e4(uint bits32) {
  // Only positive (high bit set means negative for both float and int), and
  // saturate to the maximum representable value (also dropping NaNs).
  bits32 = uint(clamp(int(bits32), 0, 0x43FFFFFB));
  if (bits32 < 0x3C800000u) {
    // The number is too small to be represented as a normalized 20e4.
    // Convert it to a denormalized value.
    bits32 = ((bits32 & 0x7FFFFFu) | 0x800000u) >> (125u - (bits32 >> 23u));
  } else {
    // Rebias the exponent to represent the value as a normalized 20e4.
    bits32 += 0xC4000000u;
  }
  return ((bits32 + 3u + ((bits32 >> 3u) & 1u)) >> 3u) & 0xFFFFFFu;
}

void main() {
  int pixel_index =
      int(gl_GlobalInvocationID.y * push_constants.buffer_pitch_px +
          gl_GlobalInvocationID.x);
  uint pixel = (Float32To20e4(imageLoad(buffer_depth, pixel_index).r) << 8u) |
               imageLoad(buffer_stencil, pixel_index).r;
  uint tile_index = push_constants.edram_offset_tiles + (gl_WorkGroupID.y >> 1)
                    * push_constants.edram_pitch_tiles + gl_WorkGroupID.x;
  uvec2 edram_coord = uvec2(tile_index & 15, tile_index >> 4) * uvec2(80, 16) +
                      gl_LocalInvocationID.xy;
  edram_coord.y += (gl_WorkGroupID.y & 1) << 3;
  imageStore(edram, ivec2(edram_coord), uvec4(pixel));
}
